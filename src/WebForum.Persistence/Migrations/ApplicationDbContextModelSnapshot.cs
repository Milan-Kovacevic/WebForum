// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebForum.Persistence.DbContext;

#nullable disable

namespace WebForum.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("WebForum.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DatePosted")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("CommentId");

                    b.HasIndex("CommentId")
                        .IsUnique();

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("comment", (string)null);
                });

            modelBuilder.Entity("WebForum.Domain.Entities.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.HasKey("PermissionId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PermissionId")
                        .IsUnique();

                    b.ToTable("permission", (string)null);

                    b.HasData(
                        new
                        {
                            PermissionId = 1,
                            Name = "CreateComment"
                        },
                        new
                        {
                            PermissionId = 2,
                            Name = "EditComment"
                        },
                        new
                        {
                            PermissionId = 3,
                            Name = "RemoveComment"
                        },
                        new
                        {
                            PermissionId = 4,
                            Name = "PostComment"
                        },
                        new
                        {
                            PermissionId = 5,
                            Name = "BlockComment"
                        });
                });

            modelBuilder.Entity("WebForum.Domain.Entities.RegistrationRequest", b =>
                {
                    b.Property<Guid>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("SubmitDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("RequestId");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("registration_request", (string)null);
                });

            modelBuilder.Entity("WebForum.Domain.Entities.Room", b =>
                {
                    b.Property<Guid>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.HasKey("RoomId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("RoomId")
                        .IsUnique();

                    b.ToTable("room", (string)null);
                });

            modelBuilder.Entity("WebForum.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessFailedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Email")
                        .HasMaxLength(192)
                        .HasColumnType("varchar(192)");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("WebForum.Domain.Entities.UserLogin", b =>
                {
                    b.Property<int>("LoginProvider")
                        .HasColumnType("int");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.HasIndex("LoginProvider", "ProviderKey")
                        .IsUnique();

                    b.ToTable("user_login", (string)null);
                });

            modelBuilder.Entity("WebForum.Domain.Entities.UserPermission", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("char(36)");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoomId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId", "RoomId", "PermissionId")
                        .IsUnique();

                    b.ToTable("user_permission", (string)null);
                });

            modelBuilder.Entity("WebForum.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.HasKey("RoleId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("RoleId")
                        .IsUnique();

                    b.ToTable("role", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Name = "Regular"
                        },
                        new
                        {
                            RoleId = 2,
                            Name = "Moderator"
                        },
                        new
                        {
                            RoleId = 3,
                            Name = "Admin"
                        },
                        new
                        {
                            RoleId = 4,
                            Name = "RootAdmin"
                        });
                });

            modelBuilder.Entity("WebForum.Domain.Entities.UserToken", b =>
                {
                    b.Property<Guid>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("TokenId");

                    b.HasIndex("TokenId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("user_token", (string)null);
                });

            modelBuilder.Entity("WebForum.Domain.Entities.Comment", b =>
                {
                    b.HasOne("WebForum.Domain.Entities.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebForum.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebForum.Domain.Entities.RegistrationRequest", b =>
                {
                    b.HasOne("WebForum.Domain.Entities.User", "User")
                        .WithOne("RegistrationRequest")
                        .HasForeignKey("WebForum.Domain.Entities.RegistrationRequest", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebForum.Domain.Entities.User", b =>
                {
                    b.HasOne("WebForum.Domain.Entities.UserRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WebForum.Domain.Entities.UserLogin", b =>
                {
                    b.HasOne("WebForum.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebForum.Domain.Entities.UserPermission", b =>
                {
                    b.HasOne("WebForum.Domain.Entities.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebForum.Domain.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebForum.Domain.Entities.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebForum.Domain.Entities.UserToken", b =>
                {
                    b.HasOne("WebForum.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebForum.Domain.Entities.User", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("RegistrationRequest");
                });
#pragma warning restore 612, 618
        }
    }
}
